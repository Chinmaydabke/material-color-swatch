{"version":3,"sources":["components/App/Headbar.jsx","components/Input/Input.jsx","components/Swatch/Palette.jsx","components/Swatch/Swatch.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["Headbar","Fragment","AppBar","className","position","elevation","Toolbar","Typography","Button","size","variant","startIcon","Input","inputCallback","useState","input","setInput","Paper","InputBase","placeholder","inputProps","onChange","event","target","value","onKeyDown","keyCode","Divider","orientation","IconButton","color","aria-label","onClick","Palette","hex","Swatch","render","regex","RegExp","length","test","App","setHex","Boolean","window","location","hostname","match","ReactDOM","React","createElement","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qaAoCeA,G,MA5BC,WACd,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,UAAUC,SAAS,QAAQC,UAAW,GACtD,kBAACC,EAAA,EAAD,CAASH,UAAU,WACjB,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAWA,UAAU,aACrB,kBAACI,EAAA,EAAD,CAAYJ,UAAU,eAAtB,0BAIF,6BACE,kBAACK,EAAA,EAAD,CACEC,KAAK,QACLN,UAAU,SACVO,QAAQ,WACRC,UAAW,kBAAC,IAAD,OAEX,0BAAMR,UAAU,eAAhB,OACA,0BAAMA,UAAU,sBAAhB,a,iDCwBCS,G,MA9CD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,KAcnC,OACE,kBAAC,IAAMf,SAAP,KACE,yBAAKE,UAAU,mBACb,kBAACc,EAAA,EAAD,CAAOd,UAAU,cACf,yBAAKA,UAAU,eACb,kBAACI,EAAA,EAAD,CAAYJ,UAAU,eAAtB,MAIF,kBAACe,EAAA,EAAD,CACEf,UAAU,aACVgB,YAAY,kBACZC,WAAY,CAAE,aAAc,sBAC5BC,SAxBU,SAACC,GACnBN,EAASM,EAAMC,OAAOC,QAwBdC,UArBa,SAACH,GACD,KAAlBA,EAAMI,UACPV,EAASM,EAAMC,OAAOC,OACtBX,EAAcE,OAoBV,kBAACY,EAAA,EAAD,CAASC,YAAY,aACrB,yBAAKzB,UAAU,sBACb,kBAAC0B,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,aACX5B,UAAU,gBACV6B,QAAS,kBAAMnB,EAAcE,KAC7B,kBAAC,IAAD,aC7BCkB,G,MAVC,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACjB,OACE,kBAAC,IAAMjC,SAAP,KACE,yBAAKE,UAAU,qBACZ+B,EADH,eCqBSC,G,MAvBA,SAAC,GAAa,IAEvBC,EAFYF,EAAU,EAAVA,IACZG,EAAQ,IAAIC,OAAQ,uBAaxB,OATEF,EADCF,EAAIK,OAAS,EACL,4BAENF,EAAMG,KAAKN,GACH,kBAAC,EAAD,CAASA,IAAKA,IAEd,4CAKX,kBAAC,IAAMjC,SAAP,KACE,yBAAKE,UAAU,oBACZiC,MCCMK,G,MAhBH,WAAO,IAAD,EACM3B,mBAAS,IADf,mBACToB,EADS,KACJQ,EADI,KAGhB,OACE,kBAAC,IAAMzC,SAAP,KACE,yBAAKE,UAAU,YACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAOU,cAAe6B,IACtB,kBAAC,EAAD,CAAQR,IAAKA,SCHHS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OACPa,IAAMC,cAAcT,EAAK,CAAEU,IAAK,QAChCC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c740a712.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  AppBar, Toolbar, Typography, Button\n} from \"@material-ui/core\";\nimport BrushIcon from '@material-ui/icons/Brush';\nimport CodeIcon from '@material-ui/icons/Code';\nimport './Headbar.scss';\n\nconst Headbar = () => {\n  return (\n    <React.Fragment>\n      <AppBar className=\"headbar\" position=\"fixed\" elevation={0}>\n        <Toolbar className=\"toolbar\">\n          <div className=\"logo-area\">\n            <BrushIcon className=\"logoIcon\" />\n            <Typography className=\"logoHeadbar\">\n              Material Color Swatch\n            </Typography>\n          </div>\n          <div>\n            <Button\n              size=\"large\"\n              className=\"button\"\n              variant=\"outlined\"\n              startIcon={<CodeIcon />}\n            >\n              <span className=\"button-text\">by </span>\n              <span className=\"button-text-author\">CD</span>\n            </Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n\nexport default Headbar;","import React, { useState } from 'react';\nimport { Typography, Paper, InputBase, Divider, IconButton } from '@material-ui/core';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport './Input.scss';\n\nconst Input = ({ inputCallback }) => {\n  const [input, setInput] = useState(\"\");\n\n  const handleInput = (event) => {\n    setInput(event.target.value);\n  }\n\n  const handleKeyPress = (event) => {\n    if(event.keyCode === 13){\n      setInput(event.target.value);\n      inputCallback(input);\n   }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"input-component\">\n        <Paper className=\"text-field\">\n          <div className=\"prefix-area\">\n            <Typography className=\"prefix-text\">\n              #\n            </Typography>\n          </div>\n          <InputBase\n            className=\"input-base\"\n            placeholder=\"Enter Hex Value\"\n            inputProps={{ 'aria-label': 'search google maps' }}\n            onChange={handleInput}\n            onKeyDown={handleKeyPress}\n          />\n          <Divider orientation=\"vertical\" />\n          <div className=\"search-button-area\">\n            <IconButton\n              color=\"primary\"\n              aria-label=\"directions\"\n              className=\"search-button\"\n              onClick={() => inputCallback(input)}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </div>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Input;","import React from 'react';\nimport './Palette.scss';\n\nconst Palette = ({ hex }) => {\n  return (\n    <React.Fragment>\n      <div className=\"palette-component\">\n        {hex} palette\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Palette;","import React from 'react';\nimport Palette from \"./Palette\";\nimport './Swatch.scss';\n\nconst Swatch = ({ hex }) => {\n  var regex = new RegExp( /^([0-9A-Fa-f]{2})+$/ );\n  let render;\n\n  if(hex.length < 1) {\n    render = <p></p>;\n  } else {\n    if(regex.test(hex)) {\n      render = <Palette hex={hex} />;\n    } else {\n      render = <p>Invalid input</p>;\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"swatch-component\">\n        {render}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Swatch;","import React, { useState } from 'react';\nimport Headbar from \"./Headbar\";\nimport Input from \"../Input/Input\";\nimport Swatch from \"../Swatch/Swatch\";\nimport './App.scss';\n\nconst App = () => {\n  const [hex, setHex] = useState(\"\");\n\n  return (\n    <React.Fragment>\n      <div className=\"app-root\">\n        <Headbar />\n        <div className=\"content-root\">\n          <Input inputCallback={setHex} />\n          <Swatch hex={hex} />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  React.createElement(App, { key: \"app\" }),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}